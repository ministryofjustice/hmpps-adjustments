/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/legacy/adjustments/{adjustmentId}': {
    /**
     * Get an adjustments
     * @description Get details of an adjustment in the NOMIS system format.
     */
    get: operations['get']
    /**
     * Update an adjustments
     * @description Synchronise an update from NOMIS into adjustments API.
     */
    put: operations['update']
    /**
     * Delete an adjustments
     * @description Synchronise a deletion from NOMIS into adjustments API.
     */
    delete: operations['delete']
  }
  '/adjustments/{adjustmentId}': {
    /**
     * Get an adjustments
     * @description Get details of an adjustment
     */
    get: operations['get_1']
    /**
     * Update an adjustments
     * @description Update an adjustment.
     */
    put: operations['update_1']
    /**
     * Delete an adjustments
     * @description Delete an adjustment.
     */
    delete: operations['delete_1']
  }
  '/legacy/adjustments': {
    /**
     * Create an adjustments
     * @description Synchronise a creation from NOMIS into adjustments API.
     */
    post: operations['create']
  }
  '/legacy/adjustments/migration': {
    /**
     * Create an adjustment from the migration job
     * @description Synchronise a creation from NOMIS into adjustments API. This endpoint is used for initial migration of data from NOMIS without raising any events.
     */
    post: operations['migration']
  }
  '/adjustments': {
    /**
     * Get adjustments by person and source
     * @description Get adjustments for a given person and adjustment source.
     */
    get: operations['findByPerson_1']
    /**
     * Create an adjustments
     * @description Create an adjustment.
     */
    post: operations['create_1']
  }
  '/adjustments/validate': {
    /**
     * Validate an adjustments
     * @description Validate an adjustment.
     */
    post: operations['validate']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description An adjustment structured for synchronising with the NOMIS system */
    LegacyAdjustment: {
      /**
       * Format: int64
       * @description The NOMIS booking ID of the adjustment
       */
      bookingId: number
      /**
       * Format: int32
       * @description The NOMIS sentence sequence of the adjustment
       */
      sentenceSequence?: number
      /** @description The NOMIS offender number aka nomsId, prisonerId of the person this adjustment applies to */
      offenderNo: string
      /**
       * @description The NOMIS adjustment type
       * @enum {string}
       */
      adjustmentType: 'ADA' | 'RADA' | 'UAL' | 'LAL' | 'SREM' | 'RSR' | 'RST' | 'RX' | 'S240A' | 'UR'
      /**
       * Format: date
       * @description The NOMIS date of adjustment
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description The NOMIS from date of adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int32
       * @description The NOMIS adjustment days
       */
      adjustmentDays: number
      /** @description The NOMIS comment for this adjustment */
      comment?: string
      /** @description The NOMIS active or inactive flag */
      active: boolean
    }
    /** @description The details of an additional days awarded (ADA) adjustment */
    AdditionalDaysAwardedDto: {
      /** @description The id of the adjudication that resulted in the ADA */
      adjudicationId: string
      /** @description Is the ADA consecutive or concurrent */
      consecutive: boolean
    }
    /** @description The adjustment and its identifier */
    AdjustmentDto: {
      /**
       * Format: uuid
       * @description The ID of the adjustment
       */
      id?: string
      /**
       * Format: int64
       * @description The NOMIS booking ID of the adjustment
       */
      bookingId: number
      /**
       * Format: int32
       * @description The NOMIS sentence sequence of the adjustment
       */
      sentenceSequence?: number
      /** @description The NOMIS ID of the person this adjustment applies to */
      person: string
      /**
       * @description The type of adjustment
       * @enum {string}
       */
      adjustmentType:
        | 'REMAND'
        | 'TAGGED_BAIL'
        | 'UNLAWFULLY_AT_LARGE'
        | 'LAWFULLY_AT_LARGE'
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'RESTORATION_OF_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
      /**
       * Format: date
       * @description The end date of the adjustment
       */
      toDate?: string
      /**
       * Format: date
       * @description The start date of the adjustment
       */
      fromDate?: string
      /**
       * Format: int32
       * @description The number of adjustment days
       */
      days?: number
      additionalDaysAwarded?: components['schemas']['AdditionalDaysAwardedDto']
      unlawfullyAtLarge?: components['schemas']['UnlawfullyAtLargeDto']
      /** @description The person last updating this adjustment */
      lastUpdatedBy?: string
      /** @description The status of this adjustment */
      status?: string
    }
    /** @description The details of a UAL adjustment */
    UnlawfullyAtLargeDto: {
      /**
       * @description The type of UAL
       * @enum {string}
       */
      type?: 'RECALL' | 'ESCAPE' | 'SENTENCED_IN_ABSENCE' | 'RELEASE_IN_ERROR'
    }
    LegacyAdjustmentCreatedResponse: {
      /** Format: uuid */
      adjustmentId: string
    }
    CreateResponseDto: {
      /** Format: uuid */
      adjustmentId: string
    }
    /** @description Validation message details */
    ValidationMessage: {
      /**
       * @description Validation code details
       * @enum {string}
       */
      code:
        | 'RADA_FROM_DATE_NOT_NULL'
        | 'RADA_REDUCES_BY_MORE_THAN_HALF'
        | 'MORE_RADAS_THAN_ADAS'
        | 'RADA_DATE_CANNOT_BE_FUTURE'
        | 'RADA_DATA_MUST_BE_AFTER_SENTENCE_DATE'
        | 'RADA_DAYS_MUST_BE_POSTIVE'
        | 'UAL_FROM_DATE_NOT_NULL'
        | 'UAL_TO_DATE_NOT_NULL'
        | 'UAL_FROM_DATE_AFTER_TO_DATE'
        | 'UAL_TYPE_NOT_NULL'
      arguments: string[]
      message: string
      /** @enum {string} */
      type: 'VALIDATION' | 'WARNING'
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /**
   * Get an adjustments
   * @description Get details of an adjustment in the NOMIS system format.
   */
  get: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    responses: {
      /** @description Adjustment found */
      200: {
        content: {
          'application/json': components['schemas']['LegacyAdjustment']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['LegacyAdjustment']
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['LegacyAdjustment']
        }
      }
    }
  }
  /**
   * Update an adjustments
   * @description Synchronise an update from NOMIS into adjustments API.
   */
  update: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    requestBody: {
      content: {
        'application/vnd.nomis-offence+json': components['schemas']['LegacyAdjustment']
      }
    }
    responses: {
      /** @description Adjustment update */
      200: never
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: never
      /** @description Adjustment not found */
      404: never
    }
  }
  /**
   * Delete an adjustments
   * @description Synchronise a deletion from NOMIS into adjustments API.
   */
  delete: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    responses: {
      /** @description Adjustment deleted */
      200: never
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: never
      /** @description Adjustment not found */
      404: never
    }
  }
  /**
   * Get an adjustments
   * @description Get details of an adjustment
   */
  get_1: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    responses: {
      /** @description Adjustment found */
      200: {
        content: {
          'application/json': components['schemas']['AdjustmentDto']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['AdjustmentDto']
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['AdjustmentDto']
        }
      }
    }
  }
  /**
   * Update an adjustments
   * @description Update an adjustment.
   */
  update_1: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjustmentDto']
      }
    }
    responses: {
      /** @description Adjustment update */
      200: never
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: never
      /** @description Adjustment not found */
      404: never
    }
  }
  /**
   * Delete an adjustments
   * @description Delete an adjustment.
   */
  delete_1: {
    parameters: {
      path: {
        /** @description The adjustment UUID */
        adjustmentId: string
      }
    }
    responses: {
      /** @description Adjustment deleted */
      200: never
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: never
      /** @description Adjustment not found */
      404: never
    }
  }
  /**
   * Create an adjustments
   * @description Synchronise a creation from NOMIS into adjustments API.
   */
  create: {
    requestBody: {
      content: {
        'application/vnd.nomis-offence+json': components['schemas']['LegacyAdjustment']
      }
    }
    responses: {
      /** @description Adjustment created */
      201: {
        content: {
          'application/json': components['schemas']['LegacyAdjustmentCreatedResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['LegacyAdjustmentCreatedResponse']
        }
      }
    }
  }
  /**
   * Create an adjustment from the migration job
   * @description Synchronise a creation from NOMIS into adjustments API. This endpoint is used for initial migration of data from NOMIS without raising any events.
   */
  migration: {
    requestBody: {
      content: {
        'application/vnd.nomis-offence+json': components['schemas']['LegacyAdjustment']
      }
    }
    responses: {
      /** @description Adjustment created */
      201: {
        content: {
          'application/json': components['schemas']['LegacyAdjustmentCreatedResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['LegacyAdjustmentCreatedResponse']
        }
      }
    }
  }
  /**
   * Get adjustments by person and source
   * @description Get adjustments for a given person and adjustment source.
   */
  findByPerson_1: {
    parameters: {
      query: {
        /** @description The noms ID of the person */
        person: string
        /** @description The noms ID of the person */
        source: 'NOMIS' | 'DPS'
      }
    }
    responses: {
      /** @description Adjustment found */
      200: {
        content: {
          'application/json': components['schemas']['AdjustmentDto'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['AdjustmentDto'][]
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['AdjustmentDto'][]
        }
      }
    }
  }
  /**
   * Create an adjustments
   * @description Create an adjustment.
   */
  create_1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjustmentDto']
      }
    }
    responses: {
      /** @description Adjustment created */
      201: {
        content: {
          'application/json': components['schemas']['CreateResponseDto']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CreateResponseDto']
        }
      }
    }
  }
  /**
   * Validate an adjustments
   * @description Validate an adjustment.
   */
  validate: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjustmentDto']
      }
    }
    responses: {
      /** @description Adjustment validation returned */
      200: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
}
